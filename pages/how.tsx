import Head from "next/head";
import { FormEventHandler, useRef, useState } from "react";
import styles from '../styles/Home.module.css'

const GRAPHQL_ENDPOINT_URL = 'http://localhost:8081/v1/graphql'

const How = () => {
  const [isSequence, setIsSequence] = useState(false)
  const [data, setData] = useState({secrets: []})
  const [isLoading, setIsLoading] = useState(false)

  const toggleIsSequence = () => setIsSequence(prev => !prev)

  const tokenRef = useRef<HTMLInputElement>(null)
  const apisRef = useRef<HTMLInputElement>(null)
  const counterRef = useRef<HTMLInputElement>(null)

  const showSecrets: FormEventHandler<HTMLFormElement> = async event => {
    event.preventDefault();
    setIsLoading(true);
    const result = [];

    for (let i = 0; i < parseInt(counterRef.current.value); i++) {
      try {
        const res = await fetch(GRAPHQL_ENDPOINT_URL, {method: "POST", body: JSON.stringify(
          {"query":"# POST https://core.tryzero.com/v1/graphql\n\nquery zeroSecrets($token: String!, $slugs: [String!]) {\n  secrets(zeroToken: $token, pick: $slugs) {\n    __typename\n    id\n\t\tname\n\n    fields {\n      __typename\n      name\n      value\n    }\n  }\n}","variables":{"token":tokenRef.current?.value ?? '',"slugs":apisRef.current?.value.split(',').map(api => api.trim()) ?? []},"operationName":"zeroSecrets"}
        , undefined, 2), headers: {'Content-Type': 'application/json'}});

        result.push(...(await res.json()).data.secrets);
      }catch(error) {
        console.error(error);
      }finally{
        setIsLoading(false);
      }
    }

    setData({secrets: result})
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <form style={{display: 'grid', rowGap: '10px'}} onSubmit={showSecrets}>
          <label>
            Sequence:
            <input onClick={toggleIsSequence} value={isSequence ? 'on': 'off'} type="checkbox" />
          </label>

          <label>
            Token:
            <input ref={tokenRef} type="text" name="token" />
          </label>

          <label>
            Pick:
            <input ref={apisRef} type="text" name="apis" />
          </label>

          <label>
            Times:
            <input ref={counterRef} type="number" name="counter" />
          </label>

          <button type="submit">show secrets</button>
        </form>


        {isLoading && 'Loading...'}

        {/* {data.error && !isLoading && <div style={{margin: '20px', maxWidth: "80%", backgroundColor: "#999", color: "#fff", overflow: 'auto'}}>
          <pre>{data.error}</pre>
  </div>} */}

        {!isLoading && <>
          <ul style={{maxHeight: '500px', overflow: 'auto'}}>
            {data.secrets.map(({name, value}, index) => <li key={index}>{index + 1}. {name}: {value}</li>)}
          </ul>

          {/* <div>
            {Boolean(data.totalTime) && <small>total: {data.totalTime} ms</small>}
            <br />
            {Boolean(data.averageTime) && <small>average: {data.averageTime} ms</small>}
            <br />
            {Boolean(data.medianTime) && <small>median: {data.medianTime} ms</small>}
          </div> */}
        </>}
      </main>
    </div>
  )
}

export default How;